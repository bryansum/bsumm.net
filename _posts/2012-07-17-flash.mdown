When discussing Adobe Flash, it's important to separate out *Flash*, the media creation software, from Flash Player, the villified ex-web platform. The former I will forever have a soft spot for, if only because it helped shape the programmer I am today.

When people talk about hating Flash, they probably mean they hate the runtime, and all the baggage that goes along with it: its fan-inducing ways, its perky installer windows that always seems to appear whenever you least expect it, letting you know that you really should upgrade to 11.0.3.4.*whatever*... We've come to expect better of our runtimes. If you have time, I'd suggest re-reading Steve Jobs' [Flash letter](http://www.apple.com/hotnews/thoughts-on-flash/). In it, he spells out clearly why we don't have Flash on iOS today: its proprietary nature, security, performance, battery life, and the fact that it wasn't designed for touch input. Except for the final explanation, these are all failings of the virtual machine. Flash, as a platform, has failed to meet the expectations of its consumers, and rather than supporting this sub-par experience, Apple chose to kill it off. Done and done.

But with the demise of Flash, I offer a more nuanced view of the ecosystem: how Flash, the editor, was once the most successful multimedia creational tool for the entire web, and was able to be so in large part due to its intuitive interface.

I confess: when I was in elementary school, I had an obsession with Pokémon. I had basically memorized the official guidebook to the series. The cover was falling off, but I remember taking that tattered thing with me everywhere. All of the coolest Pokémon fan pages had gratuitous introduction action sequences and animations, which I thought was the coolest thing ever, as a big fan of the television series. By whatever means, I remember *acquiring* a copy of Flash 4 when I realized this was the software everyone used to make these great animations. Before I knew it, or knew that programming was a paid profession, I was animating my meticulously hand-drawn vector Squirtles across the timeline with only the most cursory knowledge of how animation software actually worked. Mind you, this was when it was possible, and *encouraged*, to do everything using a GUI interface. Over the course of a year, I got more ambitious, developing fully-fledged action sequences, complete with sound, to dancing Pikachus set to the music of Saturday Night Fever, to parallax shoot-em-ups designed without a working knowledge of *variables*. Did I know the difference between buttons or movie objects, or care about the difference between bitmap or vector graphics? No. All I knew was that I had a vision, and this was giving me some pretty convincing results.

With time, I was using event-handlers, learning how to script actions to mouse events using Actionscript. I remember this being by far the most frustrating, error-prone, and least enjoyable aspect of this process, as it seemed to me like this arbitrary textual language was grafted onto this amazing playground of visual fun. I remember learning for the first time what a compilation step was, and I remember wondering if the thing I had just typed up, or more likely copy and pasted from some other site, was actually doing what I wanted it to do, with no clear insight in how to fix my issues, no matter how helpful the error messages it spit out. I remember realizing that I had to name things now, because there wasn't any other way to reference them when you didn't click and drag them. I remember it wasn't the same.

I was realizing the possibilities *and* the frustrations afforded by using this strange style of making things move: textually. When Flash 5 came around, it was if this form of development had taken over. Now, best practices dictated I learn this new language, more "fully"-featured prototypical language, with its object-oriented paradigms, before I was allowed to do the kind of animation work I once had. The role of the programmer was emphasized at the expense of the graphic artist and the creator. Flash, the tool, had effectively said I was no longer its target consumer. 

Flash 4 was the beginning for me. I think back to how formative this was to my later thinking about computers; how it gave me the confidence to know that I was indeed capable of making all these complex animations, and how creating on a computer could be as, if not more, rewarding than any pen-to-paper drawing experience. As I read back on the [history of Flash](http://www.flashmagazine.com/news/detail/the_flash_history/), it seems no coincidence that the last version I truly enjoyed using was made before it was bought by Macromedia. 

More features does not a better product make. When I see a dearth of *simple* creational software today, and especially with the iPad in the hands of so many children, I wonder why where there isn't a more concerted effort in making products that even children can be productive with, like Flash 4. Rather than assuming a certain experience with text abstractions, as "real" programmers would be wont to do, the focus on making graphical animations easy got an elementary school kid to make some awesome stuff even at a young age, some of which would still be difficult for your run-of-the-mill college hire to do -- and all because there were the right abstractions. Instead of imagining we should teach everyone the "realities" of textual programming (vim/shell/scripting language), let's spend some time to think how can instead reimagine our own tools and languages to serve the needs of a diverse set of customers, even if it means underserving those most technical. In the process, maybe we give some other young guy a glimpse of their potential future selves.

---
title: In defense of Flash, the IDE.
layout: post
---

When discussing Adobe Flash, it's important to separate out *Flash*, the IDE, from Flash Player, the vilified web runtime. The former I'll forever have a soft spot for, as it arguably influenced my becoming  the programmer I am today. 

When people talk about hating Flash, they typically mean the runtime, and all the baggage that goes along with it: its fan-inducing, CPU-devouring ineffectiveness, its perky installer windows that always seems to appear whenever you least expect it, etc. We've come to expect better of our runtimes in this day and age. Steve Jobs' [Flash letter](http://www.apple.com/hotnews/thoughts-on-flash/) spells out clearly why we don't have Flash on iOS today: its proprietary nature, its security record, performance, battery life, and the fact that it wasn't designed for touch input. Except for the final issue, these are all failings of the virtual machine. Flash, as a platform, has failed to meet the expectations of its consumers, and rather than supporting this sub-par experience, Apple chose to kill it off. That's that.

But with the eventual demise of the Flash ecosystem, let us not forget Flash, the editor, especially in its early forms. It was arguably the most successful multimedia tools for the web. It's interesting to think about why this was. My suspicion is that it gave such great power to those without formal training, in part due to its intuitive interface.

I confess: when I was in elementary school, I had an obsession with Pokémon. I had basically memorized the official guidebook to the series. I had read it so many times the cover had come clear off. Of course, I wasn't alone on the wide world of the Internet. All of the coolest Pokémon fan pages had gratuitous animated fight sequences as their splash pages, which I thought was the coolest thing ever. Somehow, and I actually don't remember quite how, I *acquiring* a copy of Flash 4 when I realized this was the software everyone used to make these great scenes. Before I knew it, or knew that programming existed as a profession, I was animating my meticulously hand-drawn vector Squirtles across the timeline with only the most cursory knowledge of how animation software actually worked. Mind you, in Flash 4, you were *encouraged* to do everything using a GUI interface. Somehow, this didn't seem to be a problem for me. Over the course of a year, I got more ambitious, developing fully-fledged action sequences, complete with sound, to dancing Pikachus set to the music of Saturday Night Fever, to parallax shoot-em-ups designed without any working knowledge of *variables*. Did I know the difference between buttons or movie objects, or care about the difference between bitmap or vector graphics? No. All I knew was that I had a vision, and this was giving me some pretty convincing results.

Eventually, I started using event-handlers, learning for the first time how to bind commands to mouse events using Actionscript. I remember this being by far the most frustrating part of the process, as I didn't ever take the time to read documentation for the thing (as if that should ever be a problem). To me, Actionscript was a band-aid, a set of arbitrary hieroglyphics grafted onto this amazing playground of visual fun. I remember painfully learning for the first time what a compilation step was, and, for the first time, wondering if the thing I had just typed up was actually going to do what I wanted it to. I remember cryptic errors that caused me to abandon crazy ideas. I remember when I first experienced [solving the second hardest problem](http://martinfowler.com/bliki/TwoHardThings.html) in computer science: naming things uniquely, because there wasn't any other way to reference them in a textual language. I remember it wasn't as fun, more than anything else.

I was realizing the possibilities *and* the frustrations caused by using an abstract, textual form when interacting with my graphics. With subsequent versions of Flash, it was if this style had taken over. Now, best practices asked I learn this new, adult Actionscript, which over time had morphed into a gargantuan ECMAScript implementation, complete with static typing, object-oriented programming constructs, and all sort of other paradigms completely foreign to me. To make a button before, all you had to do was change its appearance in the 'click' keyframe on its timeline. Now, I was forced of thinking about my button as an object, with asynchronous event handlers for each of the possible mouse states I wanted to work with before I was even allowed to think of doing the kind of animation work I once had. The role of the programmer was emphasized over the graphic artist and the tech-phobic creator. Flash, the IDE, had effectively said I was no longer its target consumer. 

Flash 4 was the beginning for me. I think back to how formative this was in my later thinking about computers; how it gave me the confidence to know that I was indeed capable of making complex animations, and how creating on a computer could be as, if not more, rewarding than any pen-to-paper drawing experience. All this *without* typing a single line of code. As I read back on the [history of Flash](http://www.flashmagazine.com/news/detail/the_flash_history/), it's interesting to see its evolution from a simple graphics utility to a fully-fledged animation suite. 

More features does not a better product make. When I see a dearth of *simple* creational software today, and especially with the iPad in the hands of so many children, I wonder why where there isn't a more concerted effort in making products that even children can be productive with, like Flash 4. Flash's focus on making animations and simple interactions easy got an elementary school kid to make some awesome stuff, some of which would still be difficult for your run-of-the-mill college hire to do in other mediums -- and all because there was a tool with the right abstractions. How egocentric, how shortsighted, are we to assume that that we should be teaching everyone "real" programming à la Codecademy, as if this were the only way to create on a computer. Let's spend some time thinking about how to re-imagine our own tools and languages to serve the jobs of a diverse set of customers, even if it means underserving those most technical. In the process, maybe we give some other kid a glimpse of their potential future selves.
